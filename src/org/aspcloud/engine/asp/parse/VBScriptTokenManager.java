/* Generated By:JavaCC: Do not edit this line. VBScriptTokenManager.java */
package org.aspcloud.engine.asp.parse;
import org.aspcloud.engine.asp.*;

public class VBScriptTokenManager implements VBScriptConstants, TokenManager
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x840L) != 0L)
         {
            jjmatchedKind = 77;
            return 47;
         }
         if ((active0 & 0x840080000000000L) != 0L)
         {
            jjmatchedKind = 77;
            return 33;
         }
         if ((active0 & 0x20L) != 0L)
            return 16;
         if ((active0 & 0x91baf51880000000L) != 0L || (active1 & 0x1bfL) != 0L)
         {
            jjmatchedKind = 77;
            return 50;
         }
         if ((active0 & 0x204006000000000L) != 0L)
         {
            jjmatchedKind = 77;
            return 99;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 77;
            return 187;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 77;
            return 61;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
            return 32;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
            return 60;
         }
         if ((active0 & 0x121100800000000L) != 0L || (active1 & 0x2L) != 0L)
            return 50;
         if ((active0 & 0x9adee57080000000L) != 0L || (active1 & 0x1fdL) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
            return 50;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x96c0067080000000L) != 0L || (active1 & 0x1fdL) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
            return 50;
         }
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
            return 35;
         }
         if ((active0 & 0x81ee90000000000L) != 0L)
            return 50;
         return -1;
      case 3:
         if ((active0 & 0x9000060000000000L) != 0L || (active1 & 0x1d5L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 3;
            }
            return 50;
         }
         if ((active0 & 0x6c0007080000000L) != 0L || (active1 & 0x28L) != 0L)
            return 50;
         if ((active1 & 0x800L) != 0L)
            return 218;
         return -1;
      case 4:
         if ((active0 & 0x1000044000000000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
            return 50;
         }
         if ((active0 & 0x8000020000000000L) != 0L || (active1 & 0x55L) != 0L)
            return 50;
         return -1;
      case 5:
         if ((active0 & 0x1000040000000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
            return 50;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0x1000040000000000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 50;
         }
         if ((active1 & 0x100L) != 0L)
            return 50;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 38:
         return jjStartNfaWithStates_0(0, 5, 16);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         return jjStopAtPos(0, 21);
      case 43:
         return jjStopAtPos(0, 10);
      case 44:
         return jjStopAtPos(0, 18);
      case 45:
         return jjStopAtPos(0, 9);
      case 47:
         return jjStopAtPos(0, 20);
      case 58:
         return jjStopAtPos(0, 4);
      case 60:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x1800cL, 0x0L);
      case 61:
         return jjStopAtPos(0, 11);
      case 62:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 92:
         return jjStopAtPos(0, 19);
      case 94:
         return jjStopAtPos(0, 7);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x840L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x204006000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1010000000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x108100800000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80400000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x180L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x840080000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20001000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0xcL, active1, 0L);
      case 61:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800a0000000000L, active1, 0x20L);
      case 70:
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 50);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x4L);
      case 79:
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 50);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 65, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x12600080000000L, active1, 0x48L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x100L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 50);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L, active1, 0x80L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L);
      case 61:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L, active1, 0L);
      case 66:
      case 98:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 50);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40041000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x110L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 50);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x60L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 80:
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 50);
         break;
      case 82:
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0x800L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 50);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x4L);
      case 86:
      case 118:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L);
      case 62:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(3, 2);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 50);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 218);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x1L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x4L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x90L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 50);
         break;
      case 79:
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 50);
         break;
      case 80:
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 50);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 50);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x40L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 50);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(4, 3);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 70:
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x80L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 50);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 50);
         break;
      case 77:
      case 109:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 50);
         break;
      case 84:
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 50);
         break;
      case 70:
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 50);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 50);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 218;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 46)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 10)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAddStates(6, 8);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  if (curChar == 13)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if (curChar == 10)
                     jjCheckNAddStates(12, 16);
                  break;
               case 7:
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(17, 22);
                  break;
               case 10:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 11:
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 12:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 14:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 34 && kind > 22)
                     kind = 22;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 22:
                  if (curChar == 13)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if (curChar == 10)
                     jjCheckNAddStates(29, 33);
                  break;
               case 28:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(34, 39);
                  break;
               case 29:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 36:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 38:
                  if (curChar == 13)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if (curChar == 10)
                     jjCheckNAddStates(43, 47);
                  break;
               case 44:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(48, 53);
                  break;
               case 45:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar != 39)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(52);
                  break;
               case 54:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 55:
                  if (curChar == 13)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if (curChar != 10)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(57, 59);
                  break;
               case 58:
                  if (curChar != 32)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(59);
                  break;
               case 63:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 65:
                  if (curChar == 13)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if (curChar == 10)
                     jjCheckNAddStates(63, 67);
                  break;
               case 71:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(68, 73);
                  break;
               case 72:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(0, 2);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 46)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(81);
                  break;
               case 84:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(77, 79);
                  break;
               case 86:
                  if (curChar == 13)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if (curChar == 10)
                     jjCheckNAddStates(80, 84);
                  break;
               case 96:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(85, 90);
                  break;
               case 97:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(91, 93);
                  break;
               case 101:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(94, 96);
                  break;
               case 103:
                  if (curChar == 13)
                     jjCheckNAdd(104);
                  break;
               case 104:
                  if (curChar == 10)
                     jjCheckNAddStates(97, 101);
                  break;
               case 108:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(102, 107);
                  break;
               case 109:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 113:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(111, 113);
                  break;
               case 115:
                  if (curChar == 13)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if (curChar == 10)
                     jjCheckNAddStates(114, 118);
                  break;
               case 119:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(119, 124);
                  break;
               case 120:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(125, 127);
                  break;
               case 124:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(128, 130);
                  break;
               case 126:
                  if (curChar == 13)
                     jjCheckNAdd(127);
                  break;
               case 127:
                  if (curChar == 10)
                     jjCheckNAddStates(131, 135);
                  break;
               case 131:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(136, 141);
                  break;
               case 132:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(142, 144);
                  break;
               case 136:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(145, 147);
                  break;
               case 138:
                  if (curChar == 13)
                     jjCheckNAdd(139);
                  break;
               case 139:
                  if (curChar == 10)
                     jjCheckNAddStates(148, 152);
                  break;
               case 142:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(153, 158);
                  break;
               case 143:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(159, 161);
                  break;
               case 146:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(162, 164);
                  break;
               case 148:
                  if (curChar == 13)
                     jjCheckNAdd(149);
                  break;
               case 149:
                  if (curChar == 10)
                     jjCheckNAddStates(165, 169);
                  break;
               case 153:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(170, 175);
                  break;
               case 154:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(176, 178);
                  break;
               case 157:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(179, 181);
                  break;
               case 159:
                  if (curChar == 13)
                     jjCheckNAdd(160);
                  break;
               case 160:
                  if (curChar == 10)
                     jjCheckNAddStates(182, 186);
                  break;
               case 169:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(187, 192);
                  break;
               case 170:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(193, 195);
                  break;
               case 173:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(196, 198);
                  break;
               case 175:
                  if (curChar == 13)
                     jjCheckNAdd(176);
                  break;
               case 176:
                  if (curChar == 10)
                     jjCheckNAddStates(199, 203);
                  break;
               case 183:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(204, 209);
                  break;
               case 184:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(210, 212);
                  break;
               case 188:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(213, 215);
                  break;
               case 190:
                  if (curChar == 13)
                     jjCheckNAdd(191);
                  break;
               case 191:
                  if (curChar == 10)
                     jjCheckNAddStates(216, 220);
                  break;
               case 197:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(221, 226);
                  break;
               case 198:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(227, 229);
                  break;
               case 200:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(230, 232);
                  break;
               case 202:
                  if (curChar == 13)
                     jjCheckNAdd(203);
                  break;
               case 203:
                  if (curChar == 10)
                     jjCheckNAddStates(233, 237);
                  break;
               case 212:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(238, 243);
                  break;
               case 213:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(244, 246);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 187:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  else if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(213, 215);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjAddStates(57, 59);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(247, 248);
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(249, 256);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(257, 258);
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 218:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 95)
                     jjCheckNAddStates(43, 47);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(50);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 4:
                  if (curChar == 95)
                     jjAddStates(12, 16);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 12:
                  jjAddStates(3, 5);
                  break;
               case 16:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(17);
                  break;
               case 19:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 21:
                  if (curChar == 95)
                     jjCheckNAddStates(29, 33);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 25:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 37:
                  if (curChar == 95)
                     jjCheckNAddStates(43, 47);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 41:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 48:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(50);
                  break;
               case 52:
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if (curChar != 95)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjAddStates(57, 59);
                  break;
               case 57:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(257, 258);
                  break;
               case 59:
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 64:
                  if (curChar == 95)
                     jjCheckNAddStates(63, 67);
                  break;
               case 67:
                  if ((0x10000000100000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 68:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 73:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 74:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(249, 256);
                  break;
               case 83:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(77, 79);
                  break;
               case 85:
                  if (curChar == 95)
                     jjCheckNAddStates(80, 84);
                  break;
               case 88:
                  if ((0x400000004000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 89:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 98:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 100:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(94, 96);
                  break;
               case 102:
                  if (curChar == 95)
                     jjCheckNAddStates(97, 101);
                  break;
               case 105:
                  if ((0x400000004L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 106:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 110:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 111:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(111, 113);
                  break;
               case 114:
                  if (curChar == 95)
                     jjCheckNAddStates(114, 118);
                  break;
               case 117:
                  if ((0x800000008000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               case 118:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 121:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 122:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(128, 130);
                  break;
               case 125:
                  if (curChar == 95)
                     jjCheckNAddStates(131, 135);
                  break;
               case 128:
                  if ((0x4000000040000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 129:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 133:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 134:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(145, 147);
                  break;
               case 137:
                  if (curChar == 95)
                     jjCheckNAddStates(148, 152);
                  break;
               case 140:
                  if ((0x4000000040L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 141:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 144:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 145:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(162, 164);
                  break;
               case 147:
                  if (curChar == 95)
                     jjCheckNAddStates(165, 169);
                  break;
               case 150:
                  if ((0x400000004L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 151:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 155:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 156:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(179, 181);
                  break;
               case 158:
                  if (curChar == 95)
                     jjCheckNAddStates(182, 186);
                  break;
               case 161:
                  if ((0x400000004000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 162:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 171:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 172:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(196, 198);
                  break;
               case 174:
                  if (curChar == 95)
                     jjCheckNAddStates(199, 203);
                  break;
               case 177:
                  if ((0x10000000100000L & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 178:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 185:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 186:
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(247, 248);
                  break;
               case 189:
                  if (curChar == 95)
                     jjCheckNAddStates(216, 220);
                  break;
               case 192:
                  if ((0x4000000040000L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 193:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 199:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(230, 232);
                  break;
               case 201:
                  if (curChar == 95)
                     jjCheckNAddStates(233, 237);
                  break;
               case 204:
                  if ((0x10000000100000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 205:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 214:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 215:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 52:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 59:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 218 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   78, 79, 80, 12, 14, 15, 3, 4, 7, 36, 37, 43, 4, 5, 6, 7, 
   9, 3, 4, 10, 5, 6, 7, 10, 5, 6, 20, 21, 27, 21, 22, 23, 
   27, 28, 20, 21, 29, 22, 23, 27, 29, 22, 23, 37, 38, 39, 43, 44, 
   36, 37, 45, 38, 39, 43, 45, 38, 39, 54, 55, 56, 63, 64, 70, 64, 
   65, 66, 70, 71, 63, 64, 72, 65, 66, 70, 72, 65, 66, 84, 85, 95, 
   85, 86, 87, 95, 96, 84, 85, 97, 86, 87, 95, 97, 86, 87, 101, 102, 
   107, 102, 103, 104, 107, 108, 101, 102, 109, 103, 104, 107, 109, 103, 104, 113, 
   114, 118, 114, 115, 116, 118, 119, 113, 114, 120, 115, 116, 118, 120, 115, 116, 
   124, 125, 130, 125, 126, 127, 130, 131, 124, 125, 132, 126, 127, 130, 132, 126, 
   127, 136, 137, 141, 137, 138, 139, 141, 142, 136, 137, 143, 138, 139, 141, 143, 
   138, 139, 146, 147, 152, 147, 148, 149, 152, 153, 146, 147, 154, 148, 149, 152, 
   154, 148, 149, 157, 158, 168, 158, 159, 160, 168, 169, 157, 158, 170, 159, 160, 
   168, 170, 159, 160, 173, 174, 182, 174, 175, 176, 182, 183, 173, 174, 184, 175, 
   176, 182, 184, 175, 176, 188, 189, 196, 189, 190, 191, 196, 197, 188, 189, 198, 
   190, 191, 196, 198, 190, 191, 200, 201, 211, 201, 202, 203, 211, 212, 200, 201, 
   213, 202, 203, 211, 213, 202, 203, 187, 217, 99, 111, 122, 134, 144, 155, 171, 
   185, 61, 76, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, "\74\45\45\76", "\74\45\75\45\76", "\72", "\46", null, "\136", 
"\50", "\55", "\53", "\75", "\76", "\74", "\76\75", "\74\75", "\74\76", "\51", "\54", 
"\134", "\57", "\52", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x78000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x18000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[218];
private final int[] jjstateSet = new int[436];
protected char curChar;
public VBScriptTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public VBScriptTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 218; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
