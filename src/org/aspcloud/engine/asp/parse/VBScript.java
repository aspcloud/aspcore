/* Generated By:JavaCC: Do not edit this line. VBScript.java */
package org.aspcloud.engine.asp.parse;

import org.aspcloud.engine.asp.*;

public class VBScript implements VBScriptConstants {
    static private long parseHexSequence(String seq)
    {
        String justHex = seq.substring(2);
        return Long.parseLong(justHex, 16);
    }

  final public Node WholeFile() throws ParseException {
    Node n;
    n = BlockList();
    jj_consume_token(0);
                            {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public void NL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NL:
      jj_consume_token(NL);
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Node HTMLNode(DebugContext dbg) throws ParseException {
    Token t;
    Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HTML:
      t = jj_consume_token(HTML);
                 t.fillDebugContext(dbg); {if (true) return new HTMLNode(t.image);}
      break;
    case OUTPUT:
      jj_consume_token(OUTPUT);
      t = jj_consume_token(EQ);
      n = ExprNode();
        if (dbg == null) dbg = new DebugContext();
        t.fillDebugContext(dbg);
        {if (true) return new OutputNode(n, dbg);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BlockNode BlockList() throws ParseException {
    BlockNode bn = new BlockNode();
    Node n, x;
    DebugContext dbg;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NL:
      case HTML:
      case OUTPUT:
      case SEMI:
      case REMARK:
      case EXITFUNCTION:
      case EXITSUB:
      case EXITDO:
      case EXITFOR:
      case ONERROR:
      case OPTIONEXPLICIT:
      case IF:
      case DIM:
      case REDIM:
      case SET:
      case FOR:
      case CALL:
      case SUB:
      case FUNCTION:
      case DO:
      case WHILE:
      case CONST:
      case PUBLIC:
      case PRIVATE:
      case SELECTCASE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXITFUNCTION:
      case EXITSUB:
      case EXITDO:
      case EXITFOR:
      case ONERROR:
      case OPTIONEXPLICIT:
      case IF:
      case DIM:
      case REDIM:
      case SET:
      case FOR:
      case CALL:
      case SUB:
      case FUNCTION:
      case DO:
      case WHILE:
      case CONST:
      case PUBLIC:
      case PRIVATE:
      case SELECTCASE:
      case IDENTIFIER:
          dbg = new DebugContext();
        n = ScriptNode(dbg);
        NL();
                                   bn.append(n, dbg);
        break;
      case REMARK:
        jj_consume_token(REMARK);
        NL();
        break;
      case HTML:
      case OUTPUT:
          dbg = new DebugContext();
        x = HTMLNode(dbg);
                            bn.append(x, dbg);
        break;
      case NL:
      case SEMI:
        NL();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public Node BlockNode() throws ParseException {
    BlockNode bn = new BlockNode();
    Node n;
    DebugContext dbg;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXITFUNCTION:
    case EXITSUB:
    case EXITDO:
    case EXITFOR:
    case ONERROR:
    case OPTIONEXPLICIT:
    case IF:
    case DIM:
    case REDIM:
    case SET:
    case FOR:
    case CALL:
    case SUB:
    case FUNCTION:
    case DO:
    case WHILE:
    case CONST:
    case PUBLIC:
    case PRIVATE:
    case SELECTCASE:
    case IDENTIFIER:
          dbg = new DebugContext();
      n = ScriptNode(dbg);
                              bn.append(n, dbg);
      break;
    case REMARK:
      jj_consume_token(REMARK);
      break;
    case HTML:
    case OUTPUT:
          dbg = new DebugContext();
      n = HTMLNode(dbg);
                            bn.append(n, dbg);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEMI);
          dbg = new DebugContext();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXITFUNCTION:
      case EXITSUB:
      case EXITDO:
      case EXITFOR:
      case ONERROR:
      case OPTIONEXPLICIT:
      case IF:
      case DIM:
      case REDIM:
      case SET:
      case FOR:
      case CALL:
      case SUB:
      case FUNCTION:
      case DO:
      case WHILE:
      case CONST:
      case PUBLIC:
      case PRIVATE:
      case SELECTCASE:
      case IDENTIFIER:
        n = ScriptNode(dbg);
                                  bn.append(n, dbg);
        break;
      case HTML:
      case OUTPUT:
        n = HTMLNode(dbg);
                                bn.append(n, dbg);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return bn;}
    throw new Error("Missing return statement in function");
  }

  final public Node ScriptNode(DebugContext dbg) throws ParseException {
    Node n;
    NumberNode nn;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
    case CALL:
    case IDENTIFIER:
      n = GetIndexOrSetValueNode(dbg);
                                      {if (true) return n;}
      break;
    case IF:
      n = ConditionalNode(dbg);
                               {if (true) return n;}
      break;
    case DIM:
    case REDIM:
      n = DefineIdentNode(dbg);
                               {if (true) return n;}
      break;
    case FOR:
      n = ForNode(dbg);
                       {if (true) return n;}
      break;
    case SUB:
    case FUNCTION:
      n = SubDefinitionNode(dbg);
                                 {if (true) return n;}
      break;
    case DO:
    case WHILE:
      n = DoNode(dbg);
                      {if (true) return n;}
      break;
    case CONST:
      n = ConstDefinitionNode(dbg);
                                   {if (true) return n;}
      break;
    case PRIVATE:
      n = PrivateStuffNode(dbg);
                                {if (true) return n;}
      break;
    case PUBLIC:
      n = PublicStuffNode(dbg);
                               {if (true) return n;}
      break;
    case SELECTCASE:
      n = SelectNode(dbg);
                          {if (true) return n;}
      break;
    case EXITFUNCTION:
      t = jj_consume_token(EXITFUNCTION);
          t.fillDebugContext(dbg);
          {if (true) return new ThrowExceptionNode(new AspExitFunctionException());}
      break;
    case EXITSUB:
      t = jj_consume_token(EXITSUB);
          t.fillDebugContext(dbg);
          {if (true) return new ThrowExceptionNode(new AspExitSubException());}
      break;
    case EXITDO:
      t = jj_consume_token(EXITDO);
          t.fillDebugContext(dbg);
          {if (true) return new ThrowExceptionNode(new AspExitDoException());}
      break;
    case EXITFOR:
      t = jj_consume_token(EXITFOR);
          t.fillDebugContext(dbg);
          {if (true) return new ThrowExceptionNode(new AspExitForException());}
      break;
    case ONERROR:
      t = jj_consume_token(ONERROR);
          t.fillDebugContext(dbg);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESUMENEXT:
        jj_consume_token(RESUMENEXT);
              {if (true) return new OnErrorNode();}
        break;
      case GOTO:
        jj_consume_token(GOTO);
        nn = NumberNode();
          {if (true) return new OnErrorNode(nn);}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case OPTIONEXPLICIT:
      t = jj_consume_token(OPTIONEXPLICIT);
          t.fillDebugContext(dbg);
          {if (true) return new OptionExplicitNode();}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IdentNode IdentNode() throws ParseException {
    IdentNode i;
    i = CtxIdentNode(null);
                             {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public IdentNode CtxIdentNode(DebugContext dbg) throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                       t.fillDebugContext(dbg); {if (true) return new IdentNode(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public NumberNode NumberNode() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
                    {if (true) return new NumberNode(new Integer(t.image));}
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                   {if (true) return new NumberNode(new Double(t.image));}
      break;
    case HEXSEQUENCE:
      t = jj_consume_token(HEXSEQUENCE);
                        {if (true) return new NumberNode(new Integer((int)parseHexSequence(t.image)));}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StringNode StringNode() throws ParseException {
    Token t;
    t = jj_consume_token(STRING);
                   {if (true) return StringNode.fromStringToken(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Node ExprNode() throws ParseException {
    Node n;
    n = ImpNode();
                    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public IdentNode LExprField() throws ParseException {
    Token t;
    t = jj_consume_token(DOT);
                {if (true) return new IdentNode(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void CommaVarListNode(VarListNode v) throws ParseException {
    Node n;
    label_3:
    while (true) {
      jj_consume_token(COMMA);
                n = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case MINUS:
      case STRING:
      case INTEGER:
      case DOUBLE:
      case HEXSEQUENCE:
      case NOT:
      case IDENTIFIER:
        n = ExprNode();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
          v.append(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
    }
  }

  final public VarListNode LExprFunction() throws ParseException {
    Node n;
    VarListNode v = new VarListNode();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MINUS:
    case STRING:
    case INTEGER:
    case DOUBLE:
    case HEXSEQUENCE:
    case NOT:
    case IDENTIFIER:
      n = ExprNode();
                         v.append(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        CommaVarListNode(v);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    case COMMA:
          v.append(null);
      CommaVarListNode(v);
      jj_consume_token(RPAREN);
      break;
    case RPAREN:
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Node LExprNode(DebugContext dbg) throws ParseException {
    Node n;
    IdentNode i;
    VarListNode v;
    n = CtxIdentNode(dbg);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        i = LExprField();
          n = new GetFieldNode(n, i);
        break;
      case LPAREN:
        v = LExprFunction();
          n = new GetIndexNode(n, v, true);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public VarListNode VarListNode() throws ParseException {
    VarListNode v = new VarListNode();
    Node n = null;
    n = ExprNode();
                     v.append(n); n = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case MINUS:
      case STRING:
      case INTEGER:
      case DOUBLE:
      case HEXSEQUENCE:
      case NOT:
      case IDENTIFIER:
        n = ExprNode();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                                                    v.append(n); n = null;
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public VarListNode OptionalVarListNode() throws ParseException {
    VarListNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MINUS:
    case STRING:
    case INTEGER:
    case DOUBLE:
    case HEXSEQUENCE:
    case NOT:
    case IDENTIFIER:
      n = VarListNode();
                        {if (true) return n;}
      break;
    default:
      jj_la1[18] = jj_gen;
      {if (true) return new VarListNode();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node GetIndexOrSetValueNode(DebugContext dbg) throws ParseException {
    Node n, p;
    VarListNode v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = LExprNode(dbg);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case MINUS:
      case EQ:
      case COMMA:
      case STRING:
      case INTEGER:
      case DOUBLE:
      case HEXSEQUENCE:
      case NOT:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          p = ExprNode();
              {if (true) return new SetValueNode(n, p, false);}
          break;
        case LPAREN:
        case MINUS:
        case COMMA:
        case STRING:
        case INTEGER:
        case DOUBLE:
        case HEXSEQUENCE:
        case NOT:
        case IDENTIFIER:
                if (!(n instanceof GetIndexNode))
                    n = new GetIndexNode(n, new VarListNode());
                v = ((GetIndexNode)n).getExpression();
                ((GetIndexNode)n).setFunction(false);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            CommaVarListNode(v);
            break;
          case LPAREN:
          case MINUS:
          case STRING:
          case INTEGER:
          case DOUBLE:
          case HEXSEQUENCE:
          case NOT:
          case IDENTIFIER:
            p = ExprNode();
                                 v.append(p);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              CommaVarListNode(v);
              break;
            default:
              jj_la1[19] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      {if (true) return n;}
      break;
    case SET:
      jj_consume_token(SET);
      n = LExprNode(dbg);
      jj_consume_token(EQ);
      p = ExprNode();
      {if (true) return new SetValueNode(n, p, true);}
      break;
    case CALL:
      jj_consume_token(CALL);
      n = LExprNode(dbg);
        if (!(n instanceof GetIndexNode)) {
            n = new GetIndexNode(n, new VarListNode());
        }
        v = ((GetIndexNode)n).getExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case MINUS:
      case COMMA:
      case STRING:
      case INTEGER:
      case DOUBLE:
      case HEXSEQUENCE:
      case NOT:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          CommaVarListNode(v);
          break;
        case LPAREN:
        case MINUS:
        case STRING:
        case INTEGER:
        case DOUBLE:
        case HEXSEQUENCE:
        case NOT:
        case IDENTIFIER:
          p = ExprNode();
                             v.append(p);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            CommaVarListNode(v);
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
        ((GetIndexNode)n).setFunction(false);
        {if (true) return n;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ElseNode() throws ParseException {
    Node i, n, e = null;
    Token t;
    DebugContext dbg = new DebugContext();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSEIF:
      t = jj_consume_token(ELSEIF);
      i = ExprNode();
      jj_consume_token(THEN);
      n = BlockList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
      case ELSEIF:
        e = ElseNode();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
          t.fillDebugContext(dbg);
          {if (true) return new ConditionalNode(i, n, e, dbg);}
      break;
    case ELSE:
      jj_consume_token(ELSE);
      n = BlockList();
                             {if (true) return n;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ConditionalNode(DebugContext dbg) throws ParseException {
    Node n;
    Node s = null;
    Node e = null;
    Token t;
    if (dbg == null) dbg = new DebugContext();
    t = jj_consume_token(IF);
               t.fillDebugContext(dbg);
    n = ExprNode();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HTML:
    case OUTPUT:
    case REMARK:
    case EXITFUNCTION:
    case EXITSUB:
    case EXITDO:
    case EXITFOR:
    case ONERROR:
    case OPTIONEXPLICIT:
    case IF:
    case DIM:
    case REDIM:
    case SET:
    case FOR:
    case CALL:
    case SUB:
    case FUNCTION:
    case DO:
    case WHILE:
    case CONST:
    case PUBLIC:
    case PRIVATE:
    case SELECTCASE:
    case IDENTIFIER:
      s = BlockNode();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML:
        case OUTPUT:
        case REMARK:
        case EXITFUNCTION:
        case EXITSUB:
        case EXITDO:
        case EXITFOR:
        case ONERROR:
        case OPTIONEXPLICIT:
        case IF:
        case DIM:
        case REDIM:
        case SET:
        case FOR:
        case CALL:
        case SUB:
        case FUNCTION:
        case DO:
        case WHILE:
        case CONST:
        case PUBLIC:
        case PRIVATE:
        case SELECTCASE:
        case IDENTIFIER:
          e = BlockNode();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDIF:
        jj_consume_token(ENDIF);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
    case NL:
    case SEMI:
      NL();
      s = BlockList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
      case ELSEIF:
        e = ElseNode();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(ENDIF);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new ConditionalNode(n, s, e, dbg);}
    throw new Error("Missing return statement in function");
  }

  final public Node DefineIdentNode(DebugContext dbg) throws ParseException {
    Node n;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIM:
      t = jj_consume_token(DIM);
                t.fillDebugContext(dbg);
      n = DimensionListNode();
                                  {if (true) return n;}
      break;
    case REDIM:
      t = jj_consume_token(REDIM);
                  t.fillDebugContext(dbg);
      n = RedimensionListNode();
                                    {if (true) return n;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarListNode NumberListNode() throws ParseException {
    VarListNode v = new VarListNode();
    NumberNode n;
    n = NumberNode();
                       v.append(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      n = NumberNode();
                                   v.append(n);
    }
         {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Node DimensionNode(DebugContext dbg) throws ParseException {
    IdentNode i;
    VarListNode v = null;
    i = CtxIdentNode(dbg);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case DOUBLE:
      case HEXSEQUENCE:
        v = NumberListNode();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
          if (v == null) {if (true) return new DefineIdentNode(i);}
            else {if (true) return new DefineIdentArrayNode(i, v);}
    throw new Error("Missing return statement in function");
  }

  final public Node DimensionListNode() throws ParseException {
    BlockNode b = new BlockNode();
    Node n;
    DebugContext dbg;
      dbg = new DebugContext();
    n = DimensionNode(dbg);
                             b.append(n, dbg);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_7;
      }
          dbg = new DebugContext();
      jj_consume_token(COMMA);
      n = DimensionNode(dbg);
                                         b.append(n, dbg);
    }
      {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Node RedimensionNode(DebugContext dbg) throws ParseException {
    IdentNode i;
    VarListNode v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      i = CtxIdentNode(dbg);
      jj_consume_token(LPAREN);
      v = OptionalVarListNode();
      jj_consume_token(RPAREN);
      {if (true) return new RedimNode(i, v, false);}
      break;
    case PRESERVE:
      jj_consume_token(PRESERVE);
      i = CtxIdentNode(dbg);
      jj_consume_token(LPAREN);
      v = OptionalVarListNode();
      jj_consume_token(RPAREN);
      {if (true) return new RedimNode(i, v, true);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node RedimensionListNode() throws ParseException {
    BlockNode b = new BlockNode();
    Node n;
    DebugContext dbg;
      dbg = new DebugContext();
    n = RedimensionNode(dbg);
                               b.append(n, dbg);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_8;
      }
          dbg = new DebugContext();
      jj_consume_token(COMMA);
      n = RedimensionNode(dbg);
                                           b.append(n, dbg);
    }
      {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Node ImpNode() throws ParseException {
    Node r;
    Node n;
    n = EqvNode();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMP:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_9;
      }
      jj_consume_token(IMP);
      r = EqvNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.IMP);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node EqvNode() throws ParseException {
    Node r;
    Node n;
    n = XorNode();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQV:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_10;
      }
      jj_consume_token(EQV);
      r = XorNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.EQV);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node XorNode() throws ParseException {
    Node r;
    Node n;
    n = OrNode();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_11;
      }
      jj_consume_token(XOR);
      r = OrNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.XOR);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node OrNode() throws ParseException {
    Node r;
    Node n;
    n = AndNode();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_12;
      }
      jj_consume_token(OR);
      r = AndNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.OR);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node AndNode() throws ParseException {
    Node r;
    Node n;
    n = NotNode();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      jj_consume_token(AND);
      r = NotNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.AND);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node NotNode() throws ParseException {
    Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      n = ComparisonNode();
        {if (true) return new ArithmeticNode(n, null, ArithmeticNode.NOT);}
      break;
    case LPAREN:
    case MINUS:
    case STRING:
    case INTEGER:
    case DOUBLE:
    case HEXSEQUENCE:
    case IDENTIFIER:
      n = ComparisonNode();
        {if (true) return n;}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ComparisonNode() throws ParseException {
    Node r;
    Node n;
    n = ConcatNode();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case GT:
      case LT:
      case GE:
      case LE:
      case NE:
      case IS:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.IS);
        break;
      case GE:
        jj_consume_token(GE);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.GE);
        break;
      case LE:
        jj_consume_token(LE);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.LE);
        break;
      case GT:
        jj_consume_token(GT);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.GT);
        break;
      case LT:
        jj_consume_token(LT);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.LT);
        break;
      case NE:
        jj_consume_token(NE);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.NE);
        break;
      case EQ:
        jj_consume_token(EQ);
        r = ConcatNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.EQ);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node ConcatNode() throws ParseException {
    Node r;
    Node n;
    n = PlusMinusNode();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
      jj_consume_token(CONCAT);
      r = PlusMinusNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.CONCAT);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node PlusMinusNode() throws ParseException {
    Node r;
    Node n;
    n = ModNode();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        r = ModNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        r = ModNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.MINUS);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node ModNode() throws ParseException {
    Node r;
    Node n;
    n = IntDivNode();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOD:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_17;
      }
      jj_consume_token(MOD);
      r = IntDivNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.MOD);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node IntDivNode() throws ParseException {
    Node r;
    Node n;
    n = MultDivNode();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTDIV:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_18;
      }
      jj_consume_token(INTDIV);
      r = MultDivNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.INTDIV);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node MultDivNode() throws ParseException {
    Node r;
    Node n;
    n = UnaryMinusNode();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MULT:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        r = UnaryMinusNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        r = UnaryMinusNode();
              n = new ArithmeticNode(n, r, ArithmeticNode.DIV);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node UnaryMinusNode() throws ParseException {
    Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      n = ExpNode();
        {if (true) return new ArithmeticNode(null, n, ArithmeticNode.MINUS);}
      break;
    case LPAREN:
    case STRING:
    case INTEGER:
    case DOUBLE:
    case HEXSEQUENCE:
    case IDENTIFIER:
      n = ExpNode();
        {if (true) return n;}
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ExpNode() throws ParseException {
    Node r;
    Node n;
    n = ConstNode();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXP:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_20;
      }
      jj_consume_token(EXP);
      r = ConstNode();
          n = new ArithmeticNode(n, r, ArithmeticNode.EXP);
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public Node ConstNode() throws ParseException {
    Node n;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      n = StringNode();
                       {if (true) return n;}
      break;
    case INTEGER:
    case DOUBLE:
    case HEXSEQUENCE:
      n = NumberNode();
                       {if (true) return n;}
      break;
    case IDENTIFIER:
      n = LExprNode(null);
                          {if (true) return n;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = ImpNode();
      jj_consume_token(RPAREN);
                                      {if (true) return n;}
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ForNode(DebugContext dbg) throws ParseException {
    IdentNode i;
    Node a, b;
    BlockNode bl;
    Node s = null;
    Token t;
    t = jj_consume_token(FOR);
                t.fillDebugContext(dbg);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      i = IdentNode();
      jj_consume_token(EQ);
      a = ExprNode();
      jj_consume_token(TO);
      b = ExprNode();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STEP:
        jj_consume_token(STEP);
        s = ExprNode();
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      NL();
      bl = BlockList();
      jj_consume_token(NEXT);
            if (s != null)
                {if (true) return new ForNode(i, a, b, bl, s, null);}
            else
                {if (true) return new ForNode(i, a, b, bl, null);}
      break;
    case EACH:
      jj_consume_token(EACH);
      i = IdentNode();
      jj_consume_token(IN);
      a = ExprNode();
      NL();
      bl = BlockList();
      jj_consume_token(NEXT);
            {if (true) return new ForEachNode(i, a, bl);}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node SubParamEntryNode() throws ParseException {
    IdentNode i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BYVAL:
      jj_consume_token(BYVAL);
      i = IdentNode();
                              {if (true) return i;}
      break;
    case BYREF:
      jj_consume_token(BYREF);
      i = IdentNode();
                              {if (true) return new ByRefNode(i);}
      break;
    case IDENTIFIER:
      i = IdentNode();
                      {if (true) return new ByRefNode(i);}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarListNode SubParamNode() throws ParseException {
    Node n;
    VarListNode v = new VarListNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BYVAL:
      case BYREF:
      case IDENTIFIER:
        n = SubParamEntryNode();
                  v.append(n);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[62] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          n = SubParamEntryNode();
                  v.append(n);
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Node SubDefinitionNode(DebugContext dbg) throws ParseException {
    IdentNode i;
    VarListNode v;
    BlockNode bl;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
      t = jj_consume_token(SUB);
      i = IdentNode();
      v = SubParamNode();
      NL();
      bl = BlockList();
      jj_consume_token(ENDSUB);
          t.fillDebugContext(dbg);
          {if (true) return new SubDefinitionNode(i, v, bl, false);}
      break;
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
      i = IdentNode();
      v = SubParamNode();
      NL();
      bl = BlockList();
      jj_consume_token(ENDFUNCTION);
          t.fillDebugContext(dbg);
          {if (true) return new SubDefinitionNode(i, v, bl, true);}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node DoNode(DebugContext dbg) throws ParseException {
    Node n, e;
    BlockNode bl;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      t = jj_consume_token(DO);
               t.fillDebugContext(dbg);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNTIL:
        jj_consume_token(UNTIL);
        e = ExprNode();
        NL();
        bl = BlockList();
        jj_consume_token(LOOP);
          {if (true) return new DoNode(e, bl, false, true);}
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
                      t.fillDebugContext(dbg);
        e = ExprNode();
        NL();
        bl = BlockList();
        jj_consume_token(LOOP);
          {if (true) return new DoNode(e, bl, false, false);}
        break;
      case NL:
      case SEMI:
        NL();
        bl = BlockList();
        jj_consume_token(LOOP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          jj_consume_token(WHILE);
          e = ExprNode();
              {if (true) return new DoNode(e, bl, true, false);}
          break;
        case UNTIL:
          jj_consume_token(UNTIL);
          e = ExprNode();
              {if (true) return new DoNode(e, bl, true, true);}
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
                  t.fillDebugContext(dbg);
      e = ExprNode();
      NL();
      bl = BlockList();
      jj_consume_token(WEND);
             {if (true) return new DoNode(e, bl, false, false);}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node PrivateStuffNode(DebugContext dbg) throws ParseException {
    Token t;
    Node n;
    t = jj_consume_token(PRIVATE);
                    t.fillDebugContext(dbg);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      n = ConstDefinitionNode(null);
                                        {if (true) return n;}
      break;
    case SUB:
    case FUNCTION:
      n = SubDefinitionNode(null);
                                      {if (true) return n;}
      break;
    case IDENTIFIER:
      n = DimensionListNode();
                                  {if (true) return n;}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node PublicStuffNode(DebugContext dbg) throws ParseException {
    Token t;
    Node n;
    t = jj_consume_token(PUBLIC);
                   t.fillDebugContext(dbg);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      n = ConstDefinitionNode(null);
                                        {if (true) return n;}
      break;
    case SUB:
    case FUNCTION:
      n = SubDefinitionNode(null);
                                      {if (true) return n;}
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node ConstDefinitionNode(DebugContext dbg) throws ParseException {
    Node n;
    Token t;
    t = jj_consume_token(CONST);
                  t.fillDebugContext(dbg);
    n = ConstListNode(true);
                                  {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode ConstListNode(boolean isPrivate) throws ParseException {
    BlockNode b = new BlockNode();
    Node e;
    IdentNode i;
    DebugContext dbg;
      dbg = new DebugContext();
    i = CtxIdentNode(dbg);
    jj_consume_token(EQ);
    e = ExprNode();
          b.append(new ConstNode(i, e, isPrivate), dbg);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_22;
      }
          dbg = new DebugContext();
      jj_consume_token(COMMA);
      i = CtxIdentNode(dbg);
      jj_consume_token(EQ);
      e = ExprNode();
          b.append(new ConstNode(i, e, isPrivate), dbg);
    }
      {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Node SelectNode(DebugContext dbg) throws ParseException {
    Node e;
    VarListNode v;
    Token t;
    t = jj_consume_token(SELECTCASE);
    e = ExprNode();
    label_23:
    while (true) {
      NL();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NL:
      case SEMI:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_23;
      }
    }
    v = CaseStatementsNode();
    jj_consume_token(ENDSELECT);
      t.fillDebugContext(dbg);
      {if (true) return new SelectNode(e, v);}
    throw new Error("Missing return statement in function");
  }

  final public VarListNode CaseStatementsNode() throws ParseException {
    VarListNode v = new VarListNode();
    CaseNode c;
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case CASEELSE:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_24;
      }
      c = CaseNode();
                       v.append(c);
    }
      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public CaseNode CaseNode() throws ParseException {
    VarListNode v;
    BlockNode bl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      v = VarListNode();
      bl = BlockList();
      {if (true) return new CaseNode(v, bl);}
      break;
    case CASEELSE:
      jj_consume_token(CASEELSE);
      bl = BlockList();
      {if (true) return new CaseNode(null, bl);}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public TokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[75];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x12,0xc,0x7880001e,0x7880001e,0x7880000c,0x10,0x7800000c,0x80000000,0x78000000,0x7000000,0x7400300,0x40000,0x40000,0x7460300,0x140,0x140,0x40000,0x7400300,0x7400300,0x40000,0x7440300,0x7440b00,0x7440b00,0x40000,0x7440300,0x7440300,0x0,0x0,0x0,0x7880000c,0x0,0x0,0x0,0x7880001e,0x0,0x40000,0x7000000,0x100,0x40000,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x7400300,0x1f800,0x1f800,0x20,0x600,0x600,0x0,0x80000,0x300000,0x300000,0x7400300,0x80,0x7400100,0x0,0x0,0x0,0x40000,0x0,0x100,0x0,0x0,0x12,0x0,0x0,0x0,0x40000,0x12,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1c100b0d,0x1c100b0d,0x1c100b0d,0x0,0x1c100b0d,0x2,0x1c100b0d,0x0,0x4000,0x0,0x0,0x4000,0x0,0x0,0x0,0x4000,0x4000,0x0,0x4000,0x4000,0x4000,0x0,0x4000,0x4000,0x4000800,0x60,0x60,0x1c100b0d,0x20,0x80,0x60,0x1c100b0d,0x300,0x0,0x0,0x0,0x0,0x400,0x0,0x80000,0x40000,0x20000,0x10000,0x8000,0x4000,0x1000,0x1000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x2000000,0x80000000,0x0,0x80000000,0x0,0x18000000,0x0,0x0,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x23d2,0x23d2,0x23d2,0x0,0x23d2,0x0,0x23d2,0x0,0x2000,0x0,0x0,0x2000,0x0,0x0,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0x2000,0x0,0x2000,0x2000,0x2000,0x0,0x0,0x23d2,0x0,0x0,0x0,0x23d2,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x2000,0x2001,0x0,0x2001,0x0,0x0,0x14,0x14,0x12,0x2040,0x40,0x0,0x0,0x1800,0x1800,};
   }

  /*public VBScript(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VBScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  public VBScript(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VBScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }     */

  public VBScript(TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }




    public void ReInit(TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 75; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
